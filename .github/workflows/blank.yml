name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      SF_ACCOUNT: ${{vars.YOUR_SNOWFLAKE_ACCOUNT}}
      SF_USERNAME: ${{vars.your_snowflake_username}}
      SF_ROLE: ${{vars.your_snowflake_role}}
      SF_WAREHOUSE: ${{vars.your_snowflake_warehouse}}
      SF_DATABASE: ${{vars.your_snowflake_database}}
      SF_SCHEMA: ${{ vars.your_snowflake_schema }}
      SNOWFLAKE_PASSWORD: ${{vars.your_snowflake_password}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Set up Python
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      # Install schemachange
      - name: Install schemachange
        run: |
          echo "Step 1: Installing schemachange"
          pip install snowflake-connector-python
          pip install schemachange==3.7.0

      # Run schemachange
      - name: Run schemachange
        run: |
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          python --version
          echo "Step 2: Running schemachange"
          schemachange -f $GITHUB_WORKSPACE/Migrations -a $SF_ACCOUNT -u $SF_USERNAME -r $SF_ROLE -w $SF_WAREHOUSE -d $SF_DATABASE -c $SF_DATABASE.SCHEMACHANGE.CHANGE_HISTORY --create-change-history-table --vars '{"SF_DATABASE": "${{env.SF_DATABASE}}", "SF_SCHEMA": "${{ env.SF_SCHEMA }}"}'
